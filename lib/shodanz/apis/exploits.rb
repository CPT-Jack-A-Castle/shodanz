require_relative 'utils.rb'

# frozen_string_literal: true

module Shodanz
  module API
    # The Exploits API provides access to several exploit
    # and vulnerability data sources. At the moment, it
    # searches across the following:
    #  - Exploit DB
    #  - Metasploit
    #  - Common Vulnerabilities and Exposures (CVE)
    #
    # @author Kent 'picat' Gruber
    class Exploits < Representation
      include Shodanz::API::Utils

      # The path to the REST API endpoint.
      DEFAULT_URL = 'https://exploits.shodan.io/api/'

      # @param key [String] SHODAN API key, defaulted to the *SHODAN_API_KEY* enviroment variable.
      def initialize(resource = nil, key: ENV['SHODAN_API_KEY'], metadata: {}, value: nil, wrapper: Wrapper::JSON.new)
        # This is a little bit of a hack to support `Exploits.new` with no arguments.
        if resource.nil?
          reference = ::Protocol::HTTP::Reference.parse(DEFAULT_URL, key: key)
          resource = Async::REST::Resource.for(reference)
        end

        super(resource, metadata: metadata, value: value, wrapper: wrapper)
      end

      # Search across a variety of data sources for exploits and
      # use facets to get summary information.
      # == Example
      #   api.search("SQL", port: 443)
      #   api.search(port: 22)
      #   api.search(type: "dos")
      def search(query = '', page: 1, **params)
        params[:query] = query
        params = turn_into_query(params)
        facets = turn_into_facets(facets)
        params[:page] = page
        get_value('search', params.merge(facets))
      end

      # This method behaves identical to the "/search" method with
      # the difference that it doesn't return any results.
      # == Example
      #   api.count(type: "dos")
      def count(query = '', page: 1, **params)
        params[:query] = query
        params = turn_into_query(params)
        facets = turn_into_facets(params)
        params[:page] = page
        get_value('count', params.merge(facets))
      end
    end
  end
end
